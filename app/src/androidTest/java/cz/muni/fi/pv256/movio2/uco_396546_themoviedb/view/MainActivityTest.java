package cz.muni.fi.pv256.movio2.uco_396546_themoviedb.view;


import android.content.res.Resources;
import android.support.test.espresso.PerformException;
import android.support.test.espresso.UiController;
import android.support.test.espresso.ViewAction;
import android.support.test.espresso.ViewInteraction;
import android.support.test.espresso.util.HumanReadables;
import android.support.test.espresso.util.TreeIterables;
import android.support.test.rule.ActivityTestRule;
import android.support.test.runner.AndroidJUnit4;
import android.test.suitebuilder.annotation.LargeTest;
import android.view.View;
import android.view.ViewGroup;
import android.view.ViewParent;

import org.hamcrest.BaseMatcher;
import org.hamcrest.Description;
import org.hamcrest.Factory;
import org.hamcrest.Matcher;
import org.hamcrest.TypeSafeMatcher;
import org.junit.Rule;
import org.junit.Test;
import org.junit.runner.RunWith;

import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;

import cz.muni.fi.pv256.movio2.uco_396546_themoviedb.R;

import static android.support.test.espresso.Espresso.onView;
import static android.support.test.espresso.Espresso.pressBack;
import static android.support.test.espresso.action.ViewActions.click;
import static android.support.test.espresso.action.ViewActions.scrollTo;
import static android.support.test.espresso.assertion.ViewAssertions.matches;
import static android.support.test.espresso.matcher.ViewMatchers.isDisplayed;
import static android.support.test.espresso.matcher.ViewMatchers.isRoot;
import static android.support.test.espresso.matcher.ViewMatchers.withContentDescription;
import static android.support.test.espresso.matcher.ViewMatchers.withId;
import static android.support.test.espresso.matcher.ViewMatchers.withParent;
import static android.support.test.espresso.matcher.ViewMatchers.withText;
import static org.hamcrest.Matchers.allOf;
import static org.hamcrest.Matchers.instanceOf;

//generated by recording activity, dont like
@LargeTest
@RunWith(AndroidJUnit4.class)
public class MainActivityTest {

    @Rule
    public ActivityTestRule<MainActivity> mActivityTestRule = new ActivityTestRule<>(MainActivity.class);

    @Test
    public void mainActivityTest() {
        onView(isRoot()).perform(waitId(R.id.list_item_icon, TimeUnit.SECONDS.toMillis(15)));
        FirstViewMatcher.matchedBefore = false;
        ViewInteraction imageView = onView(
                allOf(withId(R.id.list_item_icon),
                        withParent(FirstViewMatcher.firstView(R.id.list_item)),
                        isDisplayed()));
        imageView.perform(click());

        onView(isRoot()).perform(waitId(R.id.movie_detail_fragment, TimeUnit.SECONDS.toMillis(15)));

        ViewInteraction floatingActionButton = onView(
                withId(R.id.floatingActionButton));
        floatingActionButton.perform(scrollTo(), click());

        pressBack();

        ViewInteraction appCompatImageButton = onView(
                allOf(withContentDescription("drawer_open"),
                        withParent(allOf(withId(R.id.action_bar),
                                withParent(withId(R.id.action_bar_container)))),
                        isDisplayed()));
        appCompatImageButton.perform(click());

        onView(isRoot()).perform(waitId(R.id.left_drawer, TimeUnit.SECONDS.toMillis(15)));
        ViewInteraction relativeLayout = onView(
                allOf(childAtPosition(
                        allOf(withId(R.id.left_drawer),
                                withParent(withId(R.id.drawer_layout))),
                        1),
                        isDisplayed()));
        relativeLayout.perform(click());

        onView(isRoot()).perform(waitId(R.id.list_item_name, TimeUnit.SECONDS.toMillis(15)));
        ViewInteraction frameLayout = onView(
                allOf(childAtPosition(
                        childAtPosition(
                                withId(R.id.saved_movies_recycler_view),
                                0),
                        0),
                        isDisplayed()));
        frameLayout.check(matches(isDisplayed()));

    }

    private static Matcher<View> childAtPosition(
            final Matcher<View> parentMatcher, final int position) {

        return new TypeSafeMatcher<View>() {
            @Override
            public void describeTo(Description description) {
                description.appendText("Child at position " + position + " in parent ");
                parentMatcher.describeTo(description);
            }

            @Override
            public boolean matchesSafely(View view) {
                ViewParent parent = view.getParent();
                return parent instanceof ViewGroup && parentMatcher.matches(parent)
                        && view.equals(((ViewGroup) parent).getChildAt(position));
            }
        };
    }


    /** Perform action of waiting for a specific view id. */
    public static ViewAction waitId(final int viewId, final long millis) {
        return new ViewAction() {
            @Override
            public Matcher<View> getConstraints() {
                return isRoot();
            }

            @Override
            public String getDescription() {
                return "wait for a specific view with id <" + viewId + "> during " + millis + " millis.";
            }

            @Override
            public void perform(final UiController uiController, final View view) {
                uiController.loopMainThreadUntilIdle();
                final long startTime = System.currentTimeMillis();
                final long endTime = startTime + millis;
                final Matcher<View> viewMatcher = withId(viewId);

                do {
                    for (View child : TreeIterables.breadthFirstViewTraversal(view)) {
                        // found view with required ID
                        if (viewMatcher.matches(child)) {
                            return;
                        }
                    }

                    uiController.loopMainThreadForAtLeast(50);
                }
                while (System.currentTimeMillis() < endTime);

                // timeout happens
                throw new PerformException.Builder()
                        .withActionDescription(this.getDescription())
                        .withViewDescription(HumanReadables.describe(view))
                        .withCause(new TimeoutException())
                        .build();
            }
        };
    }

    public static class FirstViewMatcher extends BaseMatcher<View> {


        public static boolean matchedBefore = false;
        public static int mViewId;

        public FirstViewMatcher() {
            matchedBefore = false;
        }

        @Override
        public void describeTo(Description description) {
            description.appendText(" is the first view that comes along ");
        }

        @Factory
        public static <T> Matcher<View> firstView(int viewId) {
            mViewId = viewId;
            return new FirstViewMatcher();
        }

        @Override
        public boolean matches(Object item) {
            if(!(item instanceof View)){
                return false;
            }
            View view = (View)item;
            if(mViewId == view.getId()) {
                if (matchedBefore) {
                    return false;
                } else {
                    matchedBefore = true;
                    return true;
                }
            }else {
                return false;
            }
        }
    }

}
